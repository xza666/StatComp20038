rwc1=rwMC(sigma[1],x0,N)
rwc2=rwMC(sigma[2],x0,N)
rwc3=rwMC(sigma[3],x0,N)
rwc4=rwMC(sigma[4],x0,N)
par(mfrow=c(2,2))
plot(rwc1[,1],type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rwc2[,1],type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rwc3[,1],type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rwc4[,1],type="l",lwd=2,xlab="sigma=16",ylab="X")
print(c(1-rwc1[N,2]/N,1-rwc2[N,2]/N,1-rwc3[N,2]/N,1-rwc4[N,2]/N))
devt
devtools::document()
rm(list = c("rw.Metropolis", "rwMC"))
devtools::document()
library(Rcpp)
library(microbenchmark)
sourceCpp(code="#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericMatrix rwMC(double sigma,double x0,int N) {
NumericMatrix mat(N, 2);
mat(0,0)=x0;
mat(0,1)=0;
double y=0,u=0;
for(int i = 2; i < N+1; i++) {
y=rnorm(1,mat(i-2,0),sigma)[0];
u=runif(1,0,1)[0];
if(u<=exp(-abs(y))/exp(-abs(mat(i-2,0)))){
mat(i-1,0)=y;
mat(i-1,1)=mat(i-2,1);
}
else{
mat(i-1,0)=mat(i-2,0);
mat(i-1,1)=mat(i-2,1)+1;
}
}
return(mat);
}")
rw.Metropolis=function(sigma,x0,N){
f=function(x) 0.5*exp(-abs(x))
x=numeric(N)
x[1]=x0
u=runif(N)
k=0
for(i in 2:N){
y=rnorm(1,x[i-1],sigma)
if(u[i]<=f(y)/f(x[i-1])) x[i]=y
else{
x[i]=x[i-1]
k=k+1
}
}
return(list(x=x,k=k))
}
N=2000
sigma=c(0.05,0.5,2,16)
x0=25
rw1=rw.Metropolis(sigma[1],x0,N)
rw2=rw.Metropolis(sigma[2],x0,N)
rw3=rw.Metropolis(sigma[3],x0,N)
rw4=rw.Metropolis(sigma[4],x0,N)
par(mfrow=c(2,2))
plot(rw1$x,type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rw2$x,type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rw3$x,type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rw4$x,type="l",lwd=2,xlab="sigma=16",ylab="X")
print(c(1-rw1$k/N,1-rw2$k/N,1-rw3$k/N,1-rw4$k/N))
rwc1=rwMC(sigma[1],x0,N)
rwc2=rwMC(sigma[2],x0,N)
rwc3=rwMC(sigma[3],x0,N)
rwc4=rwMC(sigma[4],x0,N)
par(mfrow=c(2,2))
plot(rwc1[,1],type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rwc2[,1],type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rwc3[,1],type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rwc4[,1],type="l",lwd=2,xlab="sigma=16",ylab="X")
print(c(1-rwc1[N,2]/N,1-rwc2[N,2]/N,1-rwc3[N,2]/N,1-rwc4[N,2]/N))
par(mfrow=c(2,2))
qqplot(rw1$x,rwc1[,1])
qqplot(rw2$x,rwc2[,1])
qqplot(rw3$x,rwc3[,1])
qqplot(rw4$x,rwc4[,1])
ts1=microbenchmark(rw=rw.Metropolis(sigma[1],x0,N),rwc=rwMC(sigma[1],x0,N))
summary(ts1)[,c(1,3,5,6)]
ts2=microbenchmark(rw=rw.Metropolis(sigma[2],x0,N),rwc=rwMC(sigma[2],x0,N))
summary(ts2)[,c(1,3,5,6)]
ts3=microbenchmark(rw=rw.Metropolis(sigma[3],x0,N),rwc=rwMC(sigma[3],x0,N))
summary(ts3)[,c(1,3,5,6)]
ts4=microbenchmark(rw=rw.Metropolis(sigma[4],x0,N),rwc=rwMC(sigma[4],x0,N))
summary(ts4)[,c(1,3,5,6)]
devtools::document()
rm(list = c("rw.Metropolis", "rwMC"))
devtools::document()
devtools::document()
devtools::check()
N=2000
sigma=c(0.05,0.5,2,16)
x0=25
rw1=rw.Metropolis(sigma[1],x0,N)
rw2=rw.Metropolis(sigma[2],x0,N)
rw3=rw.Metropolis(sigma[3],x0,N)
rw4=rw.Metropolis(sigma[4],x0,N)
par(mfrow=c(4,1))
plot(rw1$x,type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rw2$x,type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rw3$x,type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rw4$x,type="l",lwd=2,xlab="sigma=16",ylab="X")
print(c(1-rw1$k/N,1-rw2$k/N,1-rw3$k/N,1-rw4$k/N))
par(mfrow=c(4,1))
qqplot(rw1$x,rwc1[,1])
qqplot(rw2$x,rwc2[,1])
qqplot(rw3$x,rwc3[,1])
qqplot(rw4$x,rwc4[,1])
devtools::check()
devtools::document()
devtools::check()
library(StatComp20038)
devtools::build_vignettes()
library(StatComp20038)
devtools::install_github("zhanghfd/statcomp",build_vignettes = TRUE,force=T)
na=444
nb=132
noo=361
nab=63
n=na+nb+noo+nab
p=q=r=L=rep(0,20)
p[1]=q[1]=r[1]=1/3
for(i in 2:20){
naa=na*(p[i-1])^2/((p[i-1])^2+2*p[i-1]*r[i-1])
nao=na*(2*p[i-1]*r[i-1])/((p[i-1])^2+2*p[i-1]*r[i-1])
nab=nab
nbb=nb*(q[i-1])^2/((q[i-1])^2+2*q[i-1]*r[i-1])
nbo=nb*(2*q[i-1]*r[i-1])/((q[i-1])^2+2*q[i-1]*r[i-1])
noo=noo
p[i]=(2*naa+nao+nab)/(2*n)
q[i]=(2*nbb+nbo+nab)/(2*n)
r[i]=(2*noo+nao+nbo)/(2*n)
L[i]=naa*log((p[i])^2)+nao*log(2*p[i]*r[i])+nbb*log((q[i])^2)+nbo*log(2*q[i]*r[i])+nab*log(p[i]*q[i])+noo*log((r[i])^2)
}
print(cbind(p,q,r,L))
attach(mtcars)
formulas <- list(
mpg ~ disp,
mpg ~ I(1 / disp),
mpg ~ disp + wt,
mpg ~ I(1 / disp) + wt
)
lapply(formulas,lm)
res=list(0,0,0,0)
for(i in 1:length(formulas)){
res[[i]]=lm(formulas[[i]])
}
print(res)
set.seed(12345)
trials <- replicate(
100,
t.test(rpois(10, 10), rpois(7, 10)),
simplify = FALSE
)
sapply(trials,function(x) return(x$p.value))
sapply(trials,"[[",3)
Mv=function(f,n,type,...){
M=Map(f,...)
return(vapply(M,cbind,type(n)))
}
lapply(mtcars, function(x) x / mean(x))[1:3]
M=Map("/",mtcars,colMeans(mtcars))
n=nrow(mtcars)
vapply(M,cbind,numeric(n))
set.seed(12345)
rw.Metropolis=function(sigma,x0,N){
f=function(x) 0.5*exp(-abs(x))
x=numeric(N)
x[1]=x0
u=runif(N)
k=0
for(i in 2:N){
y=rnorm(1,x[i-1],sigma)
if(u[i]<=f(y)/f(x[i-1])) x[i]=y
else{
x[i]=x[i-1]
k=k+1
}
}
return(list(x=x,k=k))
}
N=2000
sigma=c(0.05,0.5,2,16)
x0=25
rw1=rw.Metropolis(sigma[1],x0,N)
rw2=rw.Metropolis(sigma[2],x0,N)
rw3=rw.Metropolis(sigma[3],x0,N)
rw4=rw.Metropolis(sigma[4],x0,N)
par(mfrow=c(2,2))
plot(rw1$x,type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rw2$x,type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rw3$x,type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rw4$x,type="l",lwd=2,xlab="sigma=16",ylab="X")
set.seed(12345)
rw.Metropolis=function(sigma,x0,N){
f=function(x) 0.5*exp(-abs(x))
x=numeric(N)
x[1]=x0
u=runif(N)
k=0
for(i in 2:N){
y=rnorm(1,x[i-1],sigma)
if(u[i]<=f(y)/f(x[i-1])) x[i]=y
else{
x[i]=x[i-1]
k=k+1
}
}
return(list(x=x,k=k))
}
N=2000
sigma=c(0.05,0.5,2,16)
x0=25
rw1=rw.Metropolis(sigma[1],x0,N)
rw2=rw.Metropolis(sigma[2],x0,N)
rw3=rw.Metropolis(sigma[3],x0,N)
rw4=rw.Metropolis(sigma[4],x0,N)
par(mfrow=c(2,2))
plot(rw1$x,type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rw2$x,type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rw3$x,type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rw4$x,type="l",lwd=2,xlab="sigma=16",ylab="X")
N=2000
sigma=c(0.05,0.5,2,16)
x0=25
rw1=rw.Metropolis(sigma[1],x0,N)
rw2=rw.Metropolis(sigma[2],x0,N)
rw3=rw.Metropolis(sigma[3],x0,N)
rw4=rw.Metropolis(sigma[4],x0,N)
plot(rw1$x,type="l",lwd=2,xlab="sigma=0.05",ylab="X")
plot(rw2$x,type="l",lwd=2,xlab="sigma=0.5",ylab="X")
plot(rw3$x,type="l",lwd=2,xlab="sigma=2",ylab="X")
plot(rw4$x,type="l",lwd=2,xlab="sigma=16",ylab="X")
print(c(1-rw1$k/N,1-rw2$k/N,1-rw3$k/N,1-rw4$k/N))
Gelman.Rubin=function(psi){
psi=as.matrix(psi)
n=ncol(psi)
k=nrow(psi)
psi.means=rowMeans(psi)
B=n*var(psi.means)
psi.w=apply(psi,1,"var")
W=mean(psi.w)
v.hat=W*(n-1)/n+(B/n)
r.hat=v.hat/W
return(r.hat)
}
laplace.chain=function(sigma,N,X1){
x=rep(0,N)
x[1]=X1
u=runif(N)
for(i in 2:N){
xt=x[i-1]
y=rnorm(1,xt,sigma)
r1=f(y)*dnorm(xt,y,sigma)
r2=f(xt)*dnorm(y,xt,sigma)
r=r1/r2
if(u[i]<=r)x[i]=y
else x[i]=xt
}
return(x)
}
sigma=0.8
k=4
n=15000
b=1000
x0=c(-10,-5,5,10)
X=matrix(0,nrow=k,ncol=n)
for(i in 1:k){
X[i,]=laplace.chain(sigma,n,x0[i])
}
Gelman.Rubin=function(psi){
psi=as.matrix(psi)
n=ncol(psi)
k=nrow(psi)
psi.means=rowMeans(psi)
B=n*var(psi.means)
psi.w=apply(psi,1,"var")
W=mean(psi.w)
v.hat=W*(n-1)/n+(B/n)
r.hat=v.hat/W
return(r.hat)
}
laplace.chain=function(sigma,N,X1){
f=function(x) 0.5*exp(-abs(x))
x=rep(0,N)
x[1]=X1
u=runif(N)
for(i in 2:N){
xt=x[i-1]
y=rnorm(1,xt,sigma)
r1=f(y)*dnorm(xt,y,sigma)
r2=f(xt)*dnorm(y,xt,sigma)
r=r1/r2
if(u[i]<=r)x[i]=y
else x[i]=xt
}
return(x)
}
sigma=0.8
k=4
n=15000
b=1000
x0=c(-10,-5,5,10)
X=matrix(0,nrow=k,ncol=n)
for(i in 1:k){
X[i,]=laplace.chain(sigma,n,x0[i])
}
psi=t(apply(X,1,cumsum))
for(i in 1:nrow(psi)){
psi[i,]=psi[i,]/(1:ncol(psi))
}
par(mfrow=c(2,2))
for(i in 1:k){
plot(psi[i,(b+1):n],type="l",xlab=i,ylab=bquote(psi))
}
devtools::document()
rm(list = c("Gelman.Rubin", "laplace.chain", "rw.Metropolis"))
devtools::document()
devtools::document()
help("rowMeans")
help(rnuif)
help(runif)
help("rowMeans")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
Gelman.Rubin=function(psi){
psi=as.matrix(psi)
n=ncol(psi)
k=nrow(psi)
psi.means=rowMeans(psi)
B=n*var(psi.means)
psi.w=apply(psi,1,"var")
W=mean(psi.w)
v.hat=W*(n-1)/n+(B/n)
r.hat=v.hat/W
return(r.hat)
}
laplace.chain=function(sigma,N,X1){
f=function(x) 0.5*exp(-abs(x))
x=rep(0,N)
x[1]=X1
u=runif(N)
for(i in 2:N){
xt=x[i-1]
y=rnorm(1,xt,sigma)
r1=f(y)*dnorm(xt,y,sigma)
r2=f(xt)*dnorm(y,xt,sigma)
r=r1/r2
if(u[i]<=r)x[i]=y
else x[i]=xt
}
return(x)
}
sigma=0.8
k=4
n=15000
b=1000
x0=c(-10,-5,5,10)
X=matrix(0,nrow=k,ncol=n)
for(i in 1:k){
X[i,]=laplace.chain(sigma,n,x0[i])
}
psi=t(apply(X,1,cumsum))
for(i in 1:nrow(psi)){
psi[i,]=psi[i,]/(1:ncol(psi))
}
devtools::document()
rm(list = c("Gelman.Rubin", "laplace.chain"))
devtools::document()
devtools::check()
maxout=function(x,y){
X=x-mean(x)
Y=y-mean(y)
outx=sum(X>max(Y))+sum(X<min(Y))
outy=sum(Y>max(X))+sum(Y<min(X))
return(max(c(outx,outy)))
}
x=1:10
y=2:11
maxout(x,y)
library(boot)
library(RANN)
help(nn2)
devtools::document()
devtools::document()
rm(list = c("maxout"))
rm(list = c("maxout"))
devtools::document()
help(boot)
devtools::document()
m=1000
k=3
p=2
set.seed(12345)
n1=10
n2=100
R=999
n=n1+n2
N=c(n1,n2)
p.values=matrix(NA,m,3)
for(i in 1:m){
x=matrix(rnorm(n1*p,0,1.5),ncol=p)
y=matrix(rnorm(n2*p,0,1),ncol=p)
z=rbind(x,y)
p.values[i,1]=eqdist.nn(z,N,k)$p.value
p.values[i,2]=eqdist.etest(z,sizes=N,R=R)$p.value
p.values[i,3]=bd.test(x=x,y=y,num.permutations=999,seed=i*12345)$p.va
}
maxout=function(x,y){
X=x-mean(x)
Y=y-mean(y)
outx=sum(X>max(Y))+sum(X<min(Y))
outy=sum(Y>max(X))+sum(Y<min(X))
return(max(c(outx,outy)))
}
n1=20
n2=30
mu1=mu2=0
sigma1=sigma2=1
m=1000
p=numeric(m)
for(i in 1:m){
x=rnorm(n1,mu1,sigma1)
y=rnorm(n2,mu2,sigma2)
z=c(x,y)
R=999
reps=numeric(R)
t0=maxout(x,y)
for(j in 1:R){
k=sample(1:(n1+n2),size=n1,replace=FALSE)
x1=z[k]
y1=z[-k]
reps[j]=maxout(x1,y1)
}
p[i]=mean(c(t0,reps)>=t0)
}
print(mean(p))
library(RANN)
library(boot)
Tn=function(z,ix,sizes,k){
n1=sizes[1]
n2=sizes[2]
n=n1+n2
if(is.vector(z)) z=data.frame(z,0)
z=z[ix,]
NN=nn2(data=z,k=k+1)
block1=NN$nn.idx[1:n1,-1]
block2=NN$nn.idx[(n1+1):n,-1]
i1=sum(block1<n1+0.5)
i2=sum(block2>n1+0.5)
(i1+i2)/(k*n)
}
library(energy)
library(Ball)
m=1000
k=3
p=2
set.seed(12345)
n1=n2=50
R=999
n=n1+n2
N=c(n1,n2)
eqdist.nn=function(z,sizes,k){
boot.obj=boot(data=z,statistic=Tn,R=R,sim="permutation",sizes=sizes,k=k)
ts=c(boot.obj$t0,boot.obj$t)
p.value=mean(ts>=ts[1])
list(statistic=ts[1],p.value=p.value)
}
p.values=matrix(NA,m,3)
for(i in 1:m){
x=matrix(rnorm(n1*p,0,1),ncol=p)
y=matrix(rnorm(n2*p,0,1.5),ncol=p)
z=rbind(x,y)
p.values[i,1]=eqdist.nn(z,N,k)$p.value
p.values[i,2]=eqdist.etest(z,sizes=N,R=R)$p.value
p.values[i,3]=bd.test(x=x,y=y,num.permutations=999,seed=i*12345)$p.va
}
alpha=0.1
pow=colMeans(p.values<alpha)
print(pow)
devtools::document()
rm(list = c("eqdist.nn", "maxout", "Tn"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
library(StatComp20038)
devtools::build_vignettes()
library(StatComp20038)
help("sample")
help(rexp)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
q()
devtools::document()
devtools::check()
devtools::build_vignettes()
library(StatComp20038)
